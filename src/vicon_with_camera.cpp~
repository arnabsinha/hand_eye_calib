#include <message_filters/subscriber.h>
#include <message_filters/time_synchronizer.h>
#include <sensor_msgs/Image.h>
#include <sensor_msgs/CameraInfo.h>
#include <geometry_msgs/TransformStamped.h>
#include <message_filters/sync_policies/approximate_time.h>

using namespace sensor_msgs;
using namespace message_filters;

class vicon{
	private:
		ros::NodeHandle nh;
		message_filters::Subscriber<Image> *image_sub;
		message_filters::Subscriber<geometry_msgs::TransformStamped> *info_sub;
		typedef sync_policies::ApproximateTime<Image, geometry_msgs::TransformStamped> MySyncPolicy;
		Synchronizer<MySyncPolicy> *sync;
	public:
		void callback(const ImageConstPtr& image, const geometry_msgs::TransformStamped::ConstPtr& cam_info);
		vicon();
		~vicon();
};

vicon::vicon()
	:nh("~")
{
	image_sub = new message_filters::Subscriber<Image> (nh,"/kinect2/rgb_rect/image",1);
	info_sub = new message_filters::Subscriber<geometry_msgs::TransformStamped> (nh,"/vicon/astarTest/astarTest",1);
	sync = new Synchronizer<MySyncPolicy> (MySyncPolicy(50), *image_sub, *info_sub);
	sync->registerCallback(boost::bind(&vicon::callback, this, _1, _2));
}

vicon::~vicon(){

}

void vicon::callback(const ImageConstPtr& image, const geometry_msgs::TransformStamped::ConstPtr& cam_info)
{
  // Solve all of perception here...
	ROS_INFO_STREAM("COOL");
}

int main(int argc, char** argv)
{
	ros::init(argc, argv, "vicon_with_cam_node");
	vicon VC;
	ros::spin();

	return 0;
}

